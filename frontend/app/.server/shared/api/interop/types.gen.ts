// This file is auto-generated by @hey-api/openapi-ts

export type SinApplicationResponse = {
    SINApplication?: SinApplicationTypeResponse;
};

/**
 * The request body for SinApplication endpoint
 */
export type SinApplicationRequest = {
    /**
     * The credentials to access the system.
     */
    SystemCredential?: string;
    SINApplication?: SinApplicationType;
};

/**
 * A data type for the SIN Application resource.
 */
export type SinApplicationTypeResponse = {
    SINApplicationIdentification?: SinApplicationIdentification;
};

/**
 * A data type for the SIN Application resource.
 */
export type SinApplicationType = {
    SINApplicationIdentification?: SinApplicationIdentification[];
    Applicant?: Client;
    SINApplicationCategoryCode?: SinApplicationCategoryCode;
    SINApplicationDetail?: SinApplicationDetail[];
};

/**
 * A data type for a geophysical location described by postal information.
 */
export type AddressType = {
    AddressCountry?: AddressCountry;
    AddressPostalCode?: AddressPostalCode;
    AddressProvince?: AddressProvince;
    AddressRecipientName?: AddressRecipientName;
    AddressSecondaryUnitText?: AddressSecondaryUnitText;
    AddressStreet?: AddressStreet;
    /**
     * A name of a city or town.
     */
    AddressCityName?: string;
};

/**
 * A data type for the detail about an application.
 */
export type ApplicationDetailType = {
    ApplicationDetailID?: ApplicationDetailId;
    ApplicationDetailValue?: ApplicationDetailValue;
};

export type Client = ClientType;

export type CertificateClient = CertificateClientType;

/**
 * A data type for the client resource.
 */
export type ClientType = {
    Certificate: Certificate[];
    ClientLegalStatus?: ClientLegalStatus;
    PersonBirthDate: PersonBirthDate;
    PersonContactInformation?: PersonContactInformation[];
    PersonBirthLocation: PersonBirthLocation;
    PersonGenderCode: PersonGenderCode;
    PersonLanguage: PersonLanguage[];
    PersonName: PersonName[];
    RelatedPerson?: RelatedPerson[];
};

/**
 * A data type for the client resource.
 */
export type CertificateClientType = {
    ClientIdentification?: ClientIdentification[];
    PersonBirthDate: PersonBirthDate;
    PersonBirthLocation?: PersonBirthLocation;
    PersonGenderCode?: PersonGenderCode;
    PersonName: PersonName[];
    PersonSexAtBirthCode?: PersonSexAtBirthCode;
};

export type Certificate = CertificateType;

/**
 * A data type for the certificate resource.
 */
export type CertificateType = ResourceType & {
    CertificateCategoryCode?: ReferenceDataCodeType;
    CertificateExpiryDate?: CertificateExpiryDate;
    CertificateIdentification?: CertificateIdentification[];
    CertificateEffectiveDate?: DateType;
    CertificateIssueDate?: CertificateIssueDate;
    Client?: CertificateClient;
    RelatedPerson?: RelatedPerson[];
};

/**
 * A data type for how to contact a person or an organization.
 */
export type ContactInformationType = {
    Address?: Address[];
    EmailAddress?: EmailAddress[];
    TelephoneNumber?: TelephoneNumber[];
};

/**
 * A data type for a country, territory, dependency, or other such geopolitical subdivision of a location.
 */
export type CountryType = {
    CountryCode?: CountryCode;
};

export type DateType = {
    date?: string;
};

/**
 * A data type for an email address identifies an email box to which messages are delivered.
 */
export type EmailAddressType = {
    EmailAddressID?: EmailAddressId;
};

/**
 * A data type for a full telephone number.
 */
export type FullTelephoneNumberType = {
    TelephoneNumberFullID?: TelephoneNumberFullId;
};

/**
 * A data type for a representation of an identity.
 */
export type IdentificationType = {
    IdentificationID: IdentificationId;
};

/**
 * A data type for a language.
 */
export type LanguageType = {
    CommunicationCategoryCode?: CommunicationCategoryCode;
    LanguageCode?: LanguageCode;
    PreferredIndicator?: PreferredIndicator;
};

/**
 * A data type for a condition where a person was or is lawfully in Canada pursuant to the Immigration laws of Canada.
 */
export type LegalStatusType = {
    Certificate?: Certificate[];
};

export type LocationType = {
    LocationContactInformation?: LocationContactInformation[];
};

/**
 * A data type for a combination of names and/or titles by which a person is known.
 */
export type PersonNameType = {
    PersonFullName?: PersonFullName;
    PersonGivenName?: PersonGivenName;
    PersonNameCategoryCode?: PersonNameCategoryCode;
    PersonSurName?: PersonSurName;
};

/**
 * A data type for a province of a country.
 */
export type ProvinceType = {
    ProvinceCode?: ProvinceCode;
};

/**
 * A data type for information about a person related to a client.
 */
export type RelatedPersonType = {
    PersonBirthDate?: PersonBirthDate;
    PersonBirthLocation?: PersonBirthLocation;
    PersonContactInformation?: PersonContactInformation[];
    PersonLanguage?: PersonLanguage[];
    PersonGenderCode?: PersonGenderCode;
    PersonName?: PersonName[];
    PersonRelationshipCode?: PersonRelationshipCode;
    PersonSexAtBirthCode?: PersonSexAtBirthCode;
};

/**
 * Represents a codeable concept used by a property of a resource. It defines the value, name and origin for this code.
 */
export type ReferenceDataCodeType = {
    ReferenceDataID?: ReferenceDataId;
    ReferenceDataName?: ReferenceDataName;
};

/**
 * A data type for a resource.
 */
export type ResourceType = {
    ResourceReference?: ResourceReference;
};

/**
 * A data type for a road, thoroughfare, or highway.
 */
export type StreetType = {
    StreetNumberText?: StreetNumberText;
    StreetName?: StreetName;
};

/**
 * A data type for a telephone number for a telecommunication device.
 */
export type TelephoneNumberType = {
    FullTelephoneNumber?: FullTelephoneNumber;
    TelephoneNumberCategoryCode?: TelephoneNumberCategoryCode;
};

/**
 * A value represented in different data types.
 */
export type ValueType = {
    ValueBoolean?: ValueBoolean;
    ValueCode?: ValueCode;
    ValueString?: ValueString;
};

export type Address = AddressType;

export type AddressCountry = CountryType;

export type AddressProvince = ProvinceType;

export type AddressStreet = StreetType;

export type ApplicationDetailValue = ValueType;

export type CertificateCategoryCode = ReferenceDataCodeType;

export type CertificateClassificationCode = ReferenceDataCodeType;

export type CertificateExpiryDate = DateType;

export type CertificateIssueDate = DateType;

export type CertificateIdentification = IdentificationType;

export type ClientIdentification = IdentificationType;

export type ClientLegalStatus = LegalStatusType;

export type CommunicationCategoryCode = ReferenceDataCodeType;

export type CountryCode = ReferenceDataCodeType;

export type EmailAddress = EmailAddressType;

export type TelephoneNumber = TelephoneNumberType;

export type FullTelephoneNumber = FullTelephoneNumberType;

export type LanguageCode = ReferenceDataCodeType;

export type LocationContactInformation = ContactInformationType;

export type PersonBirthDate = DateType;

export type PersonBirthLocation = LocationType;

export type PersonContactInformation = ContactInformationType;

export type PersonNameCategoryCode = ReferenceDataCodeType;

export type PersonGenderCode = ReferenceDataCodeType;

export type PersonLanguage = LanguageType;

export type PersonName = PersonNameType;

export type PersonRelationshipCode = ReferenceDataCodeType;

export type PersonSexAtBirthCode = ReferenceDataCodeType;

export type ProvinceCode = ReferenceDataCodeType;

export type RelatedPerson = RelatedPersonType;

export type SinApplicationCategoryCode = ReferenceDataCodeType;

export type SinApplicationDetail = ApplicationDetailType;

export type SinApplicationIdentification = IdentificationType;

export type TelephoneNumberCategoryCode = ReferenceDataCodeType;

export type ValueCode = ReferenceDataCodeType;

/**
 * An identifier of a post office-assigned zone for an address.
 */
export type AddressPostalCode = string;

/**
 * A name of a person, organization, or other recipient to whom physical mail may be sent.
 */
export type AddressRecipientName = string;

/**
 * A particular unit within a larger unit or grouping at a location.
 */
export type AddressSecondaryUnitText = string;

/**
 * A unique ID for an application detail data element.
 */
export type ApplicationDetailId = string;

/**
 * An unique identifier for an email box.
 */
export type EmailAddressId = string;

/**
 * A complete telephone number.
 */
export type TelephoneNumberFullId = string;

/**
 * An identifier.
 */
export type IdentificationId = string;

/**
 * A complete name of a person.
 */
export type PersonFullName = string;

/**
 * A first name of a person.
 */
export type PersonGivenName = string;

/**
 * A last name or family name of a person.
 */
export type PersonSurName = string;

/**
 * An indicator marking this class as preferred.
 */
export type PreferredIndicator = boolean;

/**
 * A code or identifier defined for a reference data set.
 */
export type ReferenceDataId = string;

/**
 * A name or description of a code or identifier.
 */
export type ReferenceDataName = string;

/**
 * Literal reference, Relative, internal or absolute URL.
 */
export type ResourceReference = string;

/**
 * A number that identifies a particular unit or location within a street.
 */
export type StreetNumberText = string;

/**
 * A name of a street.
 */
export type StreetName = string;

/**
 * A boolean value.
 */
export type ValueBoolean = boolean;

/**
 * A string value.
 */
export type ValueString = string;

export type SinapplicationData = {
    body: SinApplicationRequest;
    path?: never;
    query?: never;
    url: '/SINApplication';
};

export type SinapplicationResponses = {
    /**
     * Success
     */
    200: SinApplicationResponse;
};

export type SinapplicationResponse = SinapplicationResponses[keyof SinapplicationResponses];

export type ClientOptions = {
    baseUrl: `${string}://other` | (string & {});
};