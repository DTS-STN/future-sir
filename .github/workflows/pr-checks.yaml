name: PR checks

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

env:
  CI: true

permissions: read-all

jobs:
  # Checks for changes to the various subprojects and emits a
  # set of boolean values that can be used to trigger each
  # subproject's build and test jobs
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.check-paths.outputs.frontend }}
      gitops: ${{ steps.check-paths.outputs.gitops }}
      infrastructure: ${{ steps.check-paths.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
      - id: check-paths
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            const files = response.data.map(file => file.filename);
            const hasFrontendChanges = files.some(file => file.startsWith('frontend/'));
            const hasGitopsChanges = files.some(file => file.startsWith('gitops/'));
            const hasInfrastructureChanges = files.some(file => file.startsWith('infrastructure/'));

            core.setOutput('frontend', hasFrontendChanges);
            core.setOutput('gitops', hasGitopsChanges);
            core.setOutput('infrastructure', hasInfrastructureChanges);

  # ----------------------- frontend jobs -----------------------
  # (disclaimer: this comment was generated using an LLM)
  #
  # Frontend build and test jobs are triggered when PR updates frontend/** files.
  #
  # IMPORTANT: These jobs are intentionally duplicated from the separate
  #            `build-frontend.yaml` workflow configuration.
  #
  #            REASON FOR DUPLICATION:
  #            In GitHub Actions, using `uses: ./.github/workflows/build-frontend.yaml`
  #            within this 'PR checks' workflow would initiate a *new, independent workflow run*
  #            of 'build-frontend.yaml'.  Critically, this 'PR checks' workflow would *not*
  #            wait for the completion or failure status of that separate 'build-frontend.yaml' run.
  #
  #            GitHub Actions workflows using `uses` to reference other workflows do *not*
  #            create a parent-child relationship in terms of status reporting for the purpose of
  #            workflow checks on pull requests.  The 'PR checks' workflow would immediately
  #            proceed and likely succeed, regardless of the outcome of the triggered 'build-frontend.yaml'
  #            workflow.
  #
  #            Therefore, to enforce proper PR checks that *wait* for the frontend build and test
  #            processes and *fail* the 'PR checks' workflow if those processes fail, the *steps*
  #            defining the frontend build and test must be directly embedded as jobs within *this*
  #            'PR checks' workflow definition. This ensures they are executed as part of the
  #            'PR checks' workflow run itself, allowing GitHub Actions to correctly track their status
  #            and enforce branch protection policies.
  #
  #            To mitigate code duplication between this 'PR checks' workflow and the separate
  #            'build-frontend.yaml' workflow (intended for pushes to `main`), consider refactoring
  #            the *steps* for building and testing the frontend into reusable components such as:
  #
  #              - Shell scripts (for simpler, script-based steps)
  #              - Composite Actions (for more complex steps or step sequences)
  #
  #            These reusable components can then be called from both this 'PR checks' workflow
  #            and the separate 'build-frontend.yaml' workflow, reducing redundancy and improving
  #            maintainability.
  #
  # -------------------------------------------------------------
  build-frontend:
    needs: [check-changes]
    if: ${{ needs.check-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - run: npm clean-install
        working-directory: frontend/
      - run: podman build --file containerfile .
        working-directory: frontend/
  test-frontend:
    needs: [check-changes]
    if: ${{ needs.check-changes.outputs.frontend == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - run: npm clean-install
        working-directory: frontend/
      - run: npm run format:check
        working-directory: frontend/
      - run: npm run lint:check
        working-directory: frontend/
      - run: npm run test -- --coverage
        working-directory: frontend/
      - run: npx playwright install chromium --with-deps
        working-directory: frontend/
      - run: npm run test:e2e
        working-directory: frontend/

  # -------------------- status aggregation ---------------------
  # This job aggregates the status of all PR check jobs.
  # Branch protection should be configured to require this job to succeed.
  # -------------------------------------------------------------
  pr-status-check:
    runs-on: ubuntu-latest
    needs: [check-changes, build-frontend, test-frontend]
    steps:
      - name: Aggregate job statuses
        run: |
          # Check each job's status.
          # Only consider jobs that *failed* as contributing to PR failure.
          # Skipped jobs will be ignored.

          JOB_STATUSES=

          if [ "${{ needs.build-frontend.result }}" == "failure" ]; then
            JOB_STATUSES+="- build-frontend: ${{ needs.build-frontend.result }}\n"
          fi
          if [ "${{ needs.test-frontend.result }}" == "failure" ]; then
            JOB_STATUSES+="- test-frontend: ${{ needs.test-frontend.result }}\n"
          fi

          if [ -n "$JOB_STATUSES" ]; then
            echo "::error::PR checks failed due to the following job failures:"
            echo "$JOB_STATUSES"
            exit 1 # exit with non-zero code to fail this job and the workflow
          fi

          echo "All relevant PR checks passed!"
